(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   (quote
    ("5ab564ba8526e14571105e4603ff8500648e58419673fde21408fa6c4878c3bd" "4b81edc8bbe6b75f9b2c416d9c2e368c82ce9bc9627dc551fd71a67d699ad13d" "26ce7eea701bfd143ac536e6805224cff5598b75effb60f047878fe9c4833ae4" "725bf8c75148ad785f9761623fc56ac1284a5e462a9c41d4645799b5a0375a63" "54a6c5c2bf2be95e6046327ec73e4c9f8c90b187a30b6c7729c3dca2dbad9e56" "bc40f613df8e0d8f31c5eb3380b61f587e1b5bc439212e03d4ea44b26b4f408a" "cf205b711e61963020e2d1561e87cdbe7727679b58af25dcabfe5073572b16f0" "f3278046d89cd5bc16fbe006a9fdec1d20b4466f12d5e80ee7a92dd4a34ff886" default)))
 '(inhibit-startup-screen t)
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(org-table ((t (:foreground "blue"))))))

(tool-bar-mode 0)
(delete-selection-mode 1)

(require 'package)
(add-to-list 'package-archives
	     '("marmalade" . "http://marmalade-repo.org/packages/") t)


;(load-theme 'tango-dark t)
(ido-mode 1)

(global-set-key (kbd "C-c e") 'eshell)
(global-set-key (kbd "C-c q") 'query-replace-regexp)


(set-face-attribute  'mode-line
                 nil 
                 :foreground "red"
                 :background "gray25" 
                 :box '(:line-width 1 :style released-button))
(set-face-attribute  'mode-line-inactive
                 nil 
                 :foreground "gray80"
                 :background "black"
                 :box '(:line-width 1 :style released-button))
;(setq x-select-enable-clipboard t)
;(setq interprogram-paste-function 'x-cut-buffer-or-selection-value)



;(require 'xclip)
;(xclip-mode 1)

(when (>= emacs-major-version 24)
  (require 'package)
  (package-initialize)
  (add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/") t)
  )


(require 'zone-matrix)
;(require 'zone-matrix-settings)
;(require 'zone-settings)

(setq zone-programs [zone-matrix])

;;(setq elfeed-feeds
;;      '("https://mail.google.com/mail/feed/atom"))

(autoload 'dirtree "dirtree" "Add directory to tree view" t)

;(require 'calfw)
;(require 'calfw-ical)
;(require 'calfw-gcal)


;(require 'helm-config)
;(helm-mode 1)

(require 'helm-config)
(helm-mode 1)
;(define-key global-map [remap find-file] 'helm-find-files)
;(define-key global-map [remap ido-find-file] 'helm-find-files)
(setq helm-split-window-in-side-p t)
(global-set-key (kbd "C-x C-f") 'helm-find-files)
(global-set-key (kbd "C-c C-r") 'helm-resume)
(define-key global-map [remap occur] 'helm-occur)
(define-key global-map [remap list-buffers] 'helm-buffers-list)
(define-key global-map [remap dabbrev-expand] 'helm-dabbrev)
(global-set-key (kbd "M-x") 'helm-M-x)
(unless (boundp 'completion-in-region-function)
  (define-key lisp-interaction-mode-map [remap completion-at-point] 'helm-lisp-completion-at-point)
  (define-key emacs-lisp-mode-map       [remap completion-at-point] 'helm-lisp-completion-at-point))


(require 'helm-swoop)

(global-set-key (kbd "M-i") 'helm-swoop)
(global-set-key (kbd "M-I") 'helm-swoop-back-to-last-point)
(global-set-key (kbd "C-c M-i") 'helm-multi-swoop)
(global-set-key (kbd "C-x M-i") 'helm-multi-swoop-all)

(projectile-global-mode)
(setq projectile-completion-system 'helm)
(helm-projectile-on)

(deftheme danielbg
  "Just change the background color")
(provide-theme 'danielbg)

(defun changebg (i)
  (let ((mainbg (if (eq i 0) "#222222" "default")))
  (custom-theme-set-faces
	`danielbg
	`(default ((t (:weight normal :slant normal :underline nil :overline nil :strike-through nil :box nil :inverse-video nil :foreground "#eeeeec" :background ,mainbg :stipple nil :inherit nil))))
	)))

(global-set-key (kbd "C-c b") (lambda () (interactive) (changebg 1)))
(global-set-key (kbd "C-c B") (lambda () (interactive) (changebg 0)))


(require 'xclip)
;(setq xclip-select-enable-clipboard 1)
(setq x-select-enable-clipboard t)
(setq interprogram-paste-function 'x-cut-buffer-or-selection-value)
(xclip-mode 1)

; style I want to use in c++ mode
(c-add-style "my-style"
	     '("stroustrup"
	       (indent-tabs-mode . nil)        ; use spaces rather than tabs
	       (c-basic-offset . 4)            ; indent by four spaces
	       (c-offsets-alist . ((inline-open . 0)  ; custom indentation rules
				   (brace-list-open . 0)
				   (statement-case-open . +)))))

(add-hook 'c++-mode-hook '(lambda ()
			    (setq-local show-trailing-whitespace t)
			    (c-set-style "my-style")        ; use my-style defined above
			    ;(semantic-mode)
					;(auto-complete-mode -1)
					;(company-mode)
			    (helm-gtags-mode)
			    (global-set-key (kbd "C-c C-f") 'helm-command-prefix)
			    (global-unset-key (kbd "C-x c"))
			    (define-key helm-gtags-mode-map (kbd "M-s") 'helm-gtags-select)
			    (setq helm-quick-update                     t ; do not display invisible candidates
				  helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
				  helm-buffers-fuzzy-matching           t ; fuzzy matching buffer names when non&#x2013;nil
				  helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
				  helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
				  helm-scroll-amount                    8 ; scroll 8 lines other window using M-&lt;next&gt;/M-&lt;prior&gt;
				  helm-ff-file-name-history-use-recentf t
				  helm-gtags-ignore-case t
				  helm-gtags-auto-update t
				  helm-gtags-use-input-at-cursor t
				  helm-gtags-pulse-at-cursor t
				  helm-gtags-prefix-key "\C-cg"
				  helm-gtags-suggested-key-mapping t)
			    (helm-gtags-mode)
			    (define-key helm-gtags-mode-map (kbd "M-.") 'helm-gtags-dwim)
			    (define-key helm-gtags-mode-map (kbd "M-,") 'helm-gtags-pop-stack)
			    ;;Too complex for me right now.
			    ;;(helm-mode)
					;(define-key company-mode-map (kbd "M-h") 'company-c-headers)
			    (hs-minor-mode)
			    (define-key hs-minor-mode-map (kbd "C-c C-t") 'hs-toggle-hiding)
			    (define-key c-mode-map (kbd "C-c C-c") 'compile)
			    (semantic-mru-bookmark-mode)
			    (define-key semantic-mode-map (kbd "M-]") 'semantic-ia-fast-jump)
			    (define-key semantic-mode-map (kbd "M-[") 'semantic-ia-fast-jump-back)
			    (define-key c-mode-map (kbd "C-c C-i") 'default-c-includes)
			    (ggtags-mode)
			    (define-key ggtags-mode-map (kbd "M-.") nil)
			    (define-key ggtags-mode-map (kbd "M-&lt;") nil)
			    (define-key ggtags-mode-map (kbd "M-&gt;") nil)
			    (define-key ggtags-mode-map (kbd "M-n") nil)
			    (define-key ggtags-mode-map (kbd "M-p") nil)
			    (define-key ggtags-mode-map (kbd "M-,") nil)
			    (define-key ggtags-mode-map (kbd "M-]") nil)
			    (define-key ggtags-mode-map (kbd "M&#x2013;") 'ggtags-find-reference)
			    ;;Flycheck has issues with tramp, just FYI.
			    ;;(flycheck-mode)
			    ))


(defun write-region-to-tmux-buffer (beg end)
  (interactive "r")
  (shell-command-on-region beg end "tmux load-buffer -" nil nil nil t)
  ;(shell-command "/home/daniel/development/tools/copy_tmux.sh")
  )

(defun write-buffer-to-tmux-buffer ()
  (interactive)
  (write-region-to-tmux-buffer (point-min) (point-max)))

(global-set-key (kbd "C-c M-w") 'write-region-to-tmux-buffer)

;(require 'helm)
(defun fu/helm-find-files-navigate-forward (orig-fun &rest args)
  (if (file-directory-p (helm-get-selection))
      (apply orig-fun args)
    (helm-maybe-exit-minibuffer)))
(advice-add 'helm-execute-persistent-action :around #'fu/helm-find-files-navigate-forward)
(define-key helm-find-files-map (kbd "TAB") 'helm-execute-persistent-action)


(global-set-key (kbd "C-c C-p") 'picture-mode)

(generate-new-buffer "tmp")
(switch-to-buffer "tmp")

(winner-mode t)

;(defun my-c++-mode-hook ()
;  (c-set-style "my-style")        ; use my-style defined above
;  )

;(add-hook 'c++-mode-hook 'my-c++-mode-hook)

; for tmux
(global-set-key "\e[1;2A" 'windmove-up)
(global-set-key "\e[1;2B" 'windmove-down)
(global-set-key "\e[1;2C" 'windmove-right)
(global-set-key "\e[1;2D" 'windmove-left)

(windmove-default-keybindings)

(elpy-enable)
(when (require 'flycheck nil t)
  (setq elpy-modules
	(delq 'elpy-module-flymak elpy-modules))
  (add-hook 'elpy-mode-hook 'flycheck-mode))

(setq auto-save-default nil)

(setq flycheck-indication-mode nil)